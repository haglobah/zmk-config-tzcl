/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define HOST_OS 1
#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/international_chars/greek.dtsi"
#include "../zmk-nodefree-config/international_chars/german.dtsi"

&sk {
    release-after-ms = <750>;
    quick-release;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC>;
};

#define ___ &trans

#define BASE_L  0
#define SYM   1
#define NUM   2
#define NAV   3
#define LANG_L  4
#define GAME_L  4

#define KEYS_LEFT 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24  // left hand
#define KEYS_RIGHT 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29  // right hand
#define THUMBS 30 31 32 33 34 35                        // thumbs

ZMK_UNICODE_SINGLE(sym_lozenge, N2, N5, C, A)
ZMK_UNICODE_SINGLE(sym_estimates, N2, N2, N5, N9)
ZMK_UNICODE_SINGLE(sym_unequal, N2, N2, N6, N0)
ZMK_UNICODE_SINGLE(sym_almost, N2, N2, N4, N8)
ZMK_UNICODE_SINGLE(sym_euro, N2, N0, A, C)
ZMK_UNICODE_SINGLE(en_dash, N2, N0, N1, N3)
ZMK_UNICODE_SINGLE(em_dash, N2, N0, N1, N4)

/ {
    macros {
        ZMK_MACRO(scope, wait-ms = <1>; tap-ms = <1>; bindings = <&kp COLON &kp COLON>;)
        ZMK_MACRO(keyword, wait-ms = <1>; tap-ms = <1>; bindings = <&kp HASH &kp COLON>;)
        ZMK_MACRO(site_link, wait-ms = <20>; tap-ms = <20>; bindings = <&kp LC(L) &kp LC(C) &kp LG(TAB) &kp LC(V)>;)
        ZMK_MACRO(site_link_cut, wait-ms = <20>; tap-ms = <20>; bindings = <&kp LC(L) &kp LC(C) &kp LC(W) &kp LG(TAB) &kp LC(V)>;)
        ZMK_MACRO(ret_swap, wait-ms = <20>; tap-ms = <20>; bindings = <&kp RET &kp LG(TAB)>;)
        ZMK_MACRO(term_paste, wait-ms = <1>; tap-ms = <1>; bindings = <&kp LC(LS(V))>;)
        ZMK_MACRO(obs_connect, wait-ms = <1>; tap-ms = <1>; bindings = <&kp MINUS &kp LT &kp GT &kp MINUS &kp SPC>;)
        ZMK_MACRO(obs_link, wait-ms = <1>; tap-ms = <1>; bindings = <&kp LBKT &kp LBKT>;)
        // ZMK_MACRO(term, wait-ms = <1>; tap-ms = <1>; bindings = <&kp LGUI &kp T &kp E &kp R &kp M &kp RET>;)
    };

    combos {
        compatible = "zmk,combos";

        #define COMBO(NAME, BINDINGS, KEYPOS, TIMEOUT) \
              combo_##NAME { \
                timeout-ms = <TIMEOUT>; \
                bindings = <BINDINGS>; \
                key-positions = <KEYPOS>; \
              };

        /*                KEY POSITIONS

          ╭────────────────────╮ ╭────────────────────╮
          │  0   1   2   3   4 │ │  5   6   7   8   9 │
          │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
          │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
          ╰───────╮ 30  31  32 │ │ 33  34  35 ╭───────╯
                  ╰────────────╯ ╰────────────╯        */

        #define COMBO_TIME 20


        COMBO(excl, &kp EXCL, 1 11, COMBO_TIME)
        COMBO(grave, &kp GRAVE, 2 12, COMBO_TIME)
        COMBO(scope, &scope, 3 13, COMBO_TIME)
        COMBO(caret, &kp CARET, 4 14, COMBO_TIME)
        COMBO(lpar, &kp LPAR, 11 12, COMBO_TIME)
        COMBO(lbrc, &kp LBRC, 11 13, COMBO_TIME)
        COMBO(lbkt, &kp LBKT, 12 13, COMBO_TIME)
        // COMBO(..., &kp .., 13 14, COMBO_TIME)
        COMBO(super_r, &kp LG(R), 11 21, COMBO_TIME)
        COMBO(bslash, &kp BSLH, 12 22, COMBO_TIME)
        COMBO(pipe, &kp PIPE, 13 23, COMBO_TIME)
        COMBO(tilde, &kp TILDE, 14 24, COMBO_TIME)
        COMBO(equal, &kp EQUAL, 21 22, COMBO_TIME)
        COMBO(underscore, &kp UNDER, 22 23, COMBO_TIME)

        COMBO(switch_lang, &sl LANG_L, 21 23, COMBO_TIME)
        COMBO(toggle_game_layer, &tog GAME_L, 20 23, COMBO_TIME)

        COMBO(percent, &kp PRCNT, 5 15, COMBO_TIME)
        COMBO(hash, &kp HASH, 6 16, COMBO_TIME)
        COMBO(semicolon, &kp SEMI, 7 17, COMBO_TIME)
        COMBO(at, &kp AT, 8 18, COMBO_TIME)
        // COMBO(..., &.., 15 16, COMBO_TIME)
        COMBO(rbkt, &kp RBKT, 16 17, COMBO_TIME)
        COMBO(rbrc, &kp RBRC, 16 18, COMBO_TIME)
        COMBO(rpar, &kp RPAR, 17 18, COMBO_TIME)
        COMBO(dollar, &kp DLLR, 15 25, COMBO_TIME)
        COMBO(ampersand, &kp AMPS, 16 26, COMBO_TIME)
        COMBO(star, &kp STAR, 17 27, COMBO_TIME)
        COMBO(plus, &kp PLUS, 18 28, COMBO_TIME)
        COMBO(minus, &kp MINUS, 26 27, COMBO_TIME)
        COMBO(caps_word, &caps_word, 26 28, COMBO_TIME)
        COMBO(colon, &kp COLON, 27 28, COMBO_TIME)

    };

    behaviors {
        lhm: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <230>;
            quick-tap-ms = <100>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_RIGHT THUMBS>;
        };

        rhm: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <230>;
            quick-tap-ms = <100>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_LEFT THUMBS>;
        };
    };

	keymap {
		compatible = "zmk,keymap";

		base_layer {
			bindings = <
                // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                     &kp Q         &kp W         &kp F         &kp P         &kp B          &kp J         &kp L         &kp U         &kp Y         &kp APOS
                // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                     &lhm LALT A   &lhm LGUI R   &lhm LSHFT S  &lhm LCTRL T  &kp G          &kp M         &rhm LCTRL N  &rhm RSHFT E  &rhm LGUI I   &rhm RALT O
                // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                     &kp Z         &kp X         &kp C         &kp D         &kp V          &kp K         &kp H         &kp COMMA     &kp DOT       &kp FSLH
                // ╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┴───────────────────────────╯
			 /*&            &*/              &lt NAV TAB   &lt SYM BSPC  &lt NUM DEL    &lt NUM RET   &lt SYM SPC   &lt NAV ESC  /*&             &*/
                //                             ╰─────────────┴─────────────┴─────────────╯╰─────────────┴─────────────┴─────────────╯                             
			>;
		};

		sym_layer {
			bindings = <
                // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                    &sym_euro      &kp EXCL      &kp LBKT      &kp RBKT      &sym_estimates &keyword   &sym_lozenge  &de_ue        &kp AT        &kp UNDER
                // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                    &de_ae         &kp MINUS     &kp PLUS      &kp EQUAL     &sym_unequal   &en_dash   &kp PRCNT     &kp LBRC      &kp RBRC      &de_oe 
                // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                    &kp CARET      &kp FSLH      &obs_connect  &obs_link     &sym_almost    &em_dash       &kp DLLR      &kp LT        &kp GT        &kp FSLH
                // ╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┴───────────────────────────╯
			 /*&            &*/               ___           ___           ___            ___           ___           ___          /*&             &*/
                //                             ╰─────────────┴─────────────┴─────────────╯╰─────────────┴─────────────┴─────────────╯                             
			>;
		};

		num_layer {
			bindings = <
                // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                     &kp UNDER     &kp N6        &kp N5        &kp N4        &kp PLUS       &kp STAR      &kp F4        &kp F5        &kp F6        &kp F10
                // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                     &kp DOT       &kp N3        &kp N2        &kp N1        &kp N0         &kp LSHFT     &kp F1        &kp F2        &kp F3        &kp F11
                // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                     &kp COMMA     &kp N9        &kp N8        &kp N7        &kp EQUAL      &kp COLON     &kp F7        &kp F8        &kp F9        &kp F12
                // ╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┴───────────────────────────╯
			 /*&            &*/               ___           ___           &kp N0         &kp N0        ___           ___          /*&             &*/
                //                             ╰─────────────┴─────────────┴─────────────╯╰─────────────┴─────────────┴─────────────╯                             
			>;
		};

		nav_layer {
			bindings = <
                // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                  ___           ___           ___           ___           &bt BT_CLR     &bt BT_CLR    ___           &bt BT_PRV    &bt BT_NXT    ___  
                // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                   &sk LALT      &sk LGUI      &sk LSHFT     &sk LCTRL     ___           ___           &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT
                // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                     ___       &site_link_cut &site_link    &ret_swap     &term_paste    ___           &kp HOME      &kp K_PREV    &kp K_NEXT    &kp END
                // ╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┴───────────────────────────╯
			 /*&            &*/               ___           ___           ___            ___           ___           ___          /*&             &*/
                //                             ╰─────────────┴─────────────┴─────────────╯╰─────────────┴─────────────┴─────────────╯                             
			>;
		};

		lang_layer {
			bindings = <
                // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                     &el_sigma     &el_omega     &el_phi       &el_pi        &el_beta       &el_epsilon   &el_lambda    &el_upsilon   &el_psi       &de_eszett   
                // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                     &el_alpha     &el_rho       ___           &el_tau       &el_gamma      &el_mu        &el_nu        ___           &el_iota      &el_omikron  
                // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                     &el_zeta      &el_xi        &el_chi       &el_delta     &el_theta      &el_kappa     &el_eta       &de_ae        &de_oe        &de_ue       
                // ╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┴───────────────────────────╯
                                                 ___           ___           ___            ___           ___           ___         
                //                             ╰─────────────┴─────────────┴─────────────╯╰─────────────┴─────────────┴─────────────╯                             
			>;
		};

		game_layer {
			bindings = <
                // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                    ___           ___           ___           ___           ___            ___           ___           ___           ___           ___
                // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                    &kp TAB        &kp ESC       &kp SPC       &kp RET       ___            ___           &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT
                // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                    ___            ___           ___           ___           ___            ___           ___           ___           ___           ___
                // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
                                                ___           ___           ___            ___           ___           ___
                //                             ╰─────────────┴─────────────┴─────────────╯╰─────────────┴─────────────┴─────────────╯
            >;
		};
	};
};
